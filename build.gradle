buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
        mavenRepoUrl = 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "${mavenRepoUrl}" }
        jcenter()
    }
    dependencies {
        //使用springboot框架
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //protobuf-gradle-plugin
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.11")
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.google.protobuf'
    version = '1.0'

    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "${mavenRepoUrl}" }
        jcenter()
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        //springboot web支持
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}"){
            exclude(group:"org.springframework.boot", module:"spring-boot-starter-logging")
        }
        //protobuf-java
        compile("com.google.protobuf:protobuf-java:3.11.1")
        compile("io.grpc:grpc-netty-shaded:1.26.0")
        compile("io.grpc:grpc-protobuf:1.26.0")
        compile("io.grpc:grpc-stub:1.26.0")

        implementation("org.slf4j:slf4j-api:1.7.+")
        implementation("org.apache.logging.log4j:log4j-core:2.13.+")
        runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.13.+")

        testCompile group: 'junit', name: 'junit', version: '4.+'
    }
}

protobuf {
    //文件生成的目标地址
    generatedFilesBaseDir = "$projectDir/src/"
    protoc {
        //从仓库下载
        artifact = 'com.google.protobuf:protoc:3.11.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.26.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

sourceSets {
    main {
        proto {
            //proto文件目录
            srcDir 'src/main/proto'
        }
    }
}

compileJava{
    options.compilerArgs << "-Xlint:deprecation"
}

bootRun {
    // https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE//gradle-plugin/reference/html/#running-your-application-reloading-resources
    sourceResources sourceSets.main

    /**
     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
     */
    if (project.hasProperty('jvmArgs')) {
        jvmArgs = (project.jvmArgs.split("\\s+") as List)
    }
}

clean{
    doLast{
        def protoGen = new File(projectDir,'/src/main/java/com/incarcloud/std/')
        protoGen.deleteDir()
    }
}